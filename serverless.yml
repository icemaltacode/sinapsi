service: sinapsi
frameworkVersion: '4'
configValidationMode: error
useDotenv: true

build:
  esbuild: false

plugins:
  - serverless-esbuild

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-south-1'}
  logs:
    httpApi: true
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:5173
        - https://localhost:5173
        - https://localhost:3000
        - https://sinapsi.studio
      allowedHeaders:
        - Authorization
        - Content-Type
        - X-Amz-Date
        - X-Requested-With
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - PUT
        - DELETE
      allowCredentials: true
    authorizers:
      cognitoAuth:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
            - ''
            - - https://cognito-idp.
              - ${self:provider.region}
              - .amazonaws.com/
              - { Ref: SinapsiUserPool }
        audience:
          - { Ref: SinapsiUserPoolClient }
  environment:
    APP_TABLE_NAME: ${self:custom.tableName}
    USAGE_TOPIC_ARN:
      Ref: UsageAlertsTopic
    PROVIDER_SECRET_PREFIX: /sinapsi/${self:provider.stage}/providers/
    STAGE: ${self:provider.stage}
    USER_POOL_ID: { Ref: SinapsiUserPool }
    USER_POOL_CLIENT_ID: { Ref: SinapsiUserPoolClient }
    DEFAULT_USER_TEMP_PASSWORD: ${env:DEFAULT_USER_TEMP_PASSWORD, 'Student1234!'}
    ADMIN_TEMP_PASSWORD: ${env:ADMIN_TEMP_PASSWORD, 'ChangeMe123!'}
    DEFAULT_OPENAI_MONTHLY_TOKENS: ${env:DEFAULT_OPENAI_MONTHLY_TOKENS, '200000'}
    DEFAULT_OPENAI_MONTHLY_SPEND_GBP: ${env:DEFAULT_OPENAI_MONTHLY_SPEND_GBP, '50'}
    AVATAR_BUCKET: { Ref: AvatarBucket }
    WEBSOCKET_URL:
      Fn::Join:
        - ''
        - - wss://
          - { Ref: WebsocketsApi }
          - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}
    WEBSOCKET_MANAGEMENT_URL:
      Fn::Join:
        - ''
        - - https://
          - { Ref: WebsocketsApi }
          - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchWriteItem
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tableName}/index/*
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            - secretsmanager:CreateSecret
            - secretsmanager:PutSecretValue
          Resource:
            - arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:${self:custom.providerSecretPrefix}*
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            -
              Ref: UsageAlertsTopic
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/*:*:*
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminRemoveUserFromGroup
            - cognito-idp:AdminListGroupsForUser
            - cognito-idp:AdminDeleteUser
          Resource:
            - Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${SinapsiUserPool}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectAcl
          Resource:
            - Fn::Sub: arn:aws:s3:::${AvatarBucket}/*
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource:
            - arn:aws:execute-api:${aws:region}:${aws:accountId}:*/@connections/*

custom:
  tableName: ${self:service}-table-${self:provider.stage}
  usageTopicName: ${self:service}-usage-${self:provider.stage}
  providerSecretPrefix: /sinapsi/${self:provider.stage}/providers/
  adminUser:
    email: ${env:ADMIN_USER_EMAIL, 'admin@ice.cam.ac.uk'}
    displayName: ${env:ADMIN_USER_DISPLAY_NAME, 'ICE Campus Admin'}
    userId: ${env:ADMIN_USER_ID, 'admin'}
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    target: node20
    external:
      - aws-sdk
    platform: node
    loader:
      .ts: ts
    watch:
      pattern: src/**/*.ts

functions:
  health:
    handler: src/handlers/health.handler
    events:
      - httpApi:
          method: GET
          path: /health

  chatProviders:
    handler: src/handlers/chat.providers
    events:
      - httpApi:
          method: GET
          path: /chat/providers
          authorizer: cognitoAuth

  chatSessionsCreate:
    handler: src/handlers/chat.sessionsCreate
    events:
      - httpApi:
          method: POST
          path: /chat/sessions
          authorizer: cognitoAuth

  chatSessionsList:
    handler: src/handlers/chat.sessionsList
    events:
      - httpApi:
          method: GET
          path: /chat/sessions
          authorizer: cognitoAuth

  chatSessionMessages:
    handler: src/handlers/chat.sessionsMessages
    events:
      - httpApi:
          method: POST
          path: /chat/sessions/{sessionId}/messages
          authorizer: cognitoAuth

  chatSessionGet:
    handler: src/handlers/chat.sessionsGet
    events:
      - httpApi:
          method: GET
          path: /chat/sessions/{sessionId}
          authorizer: cognitoAuth

  chatSessionUpdate:
    handler: src/handlers/chat.sessionsUpdate
    events:
      - httpApi:
          method: PATCH
          path: /chat/sessions/{sessionId}
          authorizer: cognitoAuth

  chatSessionDelete:
    handler: src/handlers/chat.sessionsDelete
    events:
      - httpApi:
          method: DELETE
          path: /chat/sessions/{sessionId}
          authorizer: cognitoAuth

  promptsList:
    handler: src/handlers/prompts.list
    events:
      - httpApi:
          method: GET
          path: /prompts
          authorizer: cognitoAuth

  promptsSave:
    handler: src/handlers/prompts.save
    events:
      - httpApi:
          method: POST
          path: /prompts
          authorizer: cognitoAuth

  personasList:
    handler: src/handlers/personas.list
    events:
      - httpApi:
          method: GET
          path: /personas
          authorizer: cognitoAuth

  personasSave:
    handler: src/handlers/personas.save
    events:
      - httpApi:
          method: POST
          path: /personas
          authorizer: cognitoAuth

  adminUsers:
    handler: src/handlers/admin.users
    events:
      - httpApi:
          method: POST
          path: /admin/users
          authorizer: cognitoAuth

  adminUsersList:
    handler: src/handlers/admin.usersList
    events:
      - httpApi:
          method: GET
          path: /admin/users
          authorizer: cognitoAuth

  adminUserUpdate:
    handler: src/handlers/admin.usersUpdate
    events:
      - httpApi:
          method: PUT
          path: /admin/users/{userId}
          authorizer: cognitoAuth

  adminUserDelete:
    handler: src/handlers/admin.usersDelete
    events:
      - httpApi:
          method: DELETE
          path: /admin/users/{userId}
          authorizer: cognitoAuth

  accountProfile:
    handler: src/handlers/account.profile
    events:
      - httpApi:
          method: GET
          path: /account/profile
          authorizer: cognitoAuth
      - httpApi:
          method: PUT
          path: /account/profile
          authorizer: cognitoAuth

  accountAvatarUpload:
    handler: src/handlers/account.avatarUpload
    events:
      - httpApi:
          method: POST
          path: /account/avatar
          authorizer: cognitoAuth

  adminProviders:
    handler: src/handlers/admin.providers
    events:
      - httpApi:
          method: GET
          path: /admin/providers
          authorizer: cognitoAuth
      - httpApi:
          method: POST
          path: /admin/providers
          authorizer: cognitoAuth
      - httpApi:
          method: PUT
          path: /admin/providers/{providerId}
          authorizer: cognitoAuth
      - httpApi:
          method: DELETE
          path: /admin/providers/{providerId}
          authorizer: cognitoAuth

  adminQuotas:
    handler: src/handlers/admin.quotas
    events:
      - httpApi:
          method: POST
          path: /admin/quotas
          authorizer: cognitoAuth

  adminUsage:
    handler: src/handlers/admin.usage
    events:
      - httpApi:
          method: GET
          path: /admin/usage
          authorizer: cognitoAuth

  wsConnect:
    handler: src/handlers/websocket.connect
    events:
      - websocket:
          route: $connect

  wsDisconnect:
    handler: src/handlers/websocket.disconnect
    events:
      - websocket:
          route: $disconnect

  wsDefault:
    handler: src/handlers/websocket.defaultHandler
    events:
      - websocket:
          route: $default

resources:
  Resources:
    SinapsiTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: gsi1pk
            AttributeType: S
          - AttributeName: gsi1sk
            AttributeType: S
          - AttributeName: gsi2pk
            AttributeType: S
          - AttributeName: gsi2sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: gsi1pk
                KeyType: HASH
              - AttributeName: gsi1sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GSI2
            KeySchema:
              - AttributeName: gsi2pk
                KeyType: HASH
              - AttributeName: gsi2sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    UsageAlertsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.usageTopicName}
    UsageBudgetAlert:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:USAGE_ALERT_EMAIL, 'ops@example.com'}
        Protocol: email
        TopicArn:
          Ref: UsageAlertsTopic
    SinapsiUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        Policies:
          PasswordPolicy:
            MinimumLength: 12
            RequireLowercase: true
            RequireUppercase: true
            RequireNumbers: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Name: role
            Mutable: true
            Required: false
            StringAttributeConstraints:
              MinLength: '3'
              MaxLength: '12'
    SinapsiUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId: { Ref: SinapsiUserPool }
        GenerateSecret: false
        PreventUserExistenceErrors: ENABLED
        ExplicitAuthFlows:
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
        SupportedIdentityProviders:
          - COGNITO
    SinapsiAdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: admins
        Description: Sinapsi administrators
        UserPoolId: { Ref: SinapsiUserPool }
    SinapsiStudentGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: students
        Description: Sinapsi students
        UserPoolId: { Ref: SinapsiUserPool }
    SinapsiAdminUser:
      Type: AWS::Cognito::UserPoolUser
      Properties:
        UserPoolId: { Ref: SinapsiUserPool }
        Username: ${self:custom.adminUser.email}
        DesiredDeliveryMediums: []
        MessageAction: SUPPRESS
        UserAttributes:
          - Name: email
            Value: ${self:custom.adminUser.email}
          - Name: email_verified
            Value: 'true'
          - Name: name
            Value: ${self:custom.adminUser.displayName}
          - Name: preferred_username
            Value: ${self:custom.adminUser.userId}
          - Name: custom:role
            Value: admin
    SinapsiAdminUserToGroup:
      Type: AWS::Cognito::UserPoolUserToGroupAttachment
      Properties:
        GroupName: admins
        UserPoolId: { Ref: SinapsiUserPool }
        Username: ${self:custom.adminUser.email}
      DependsOn:
        - SinapsiAdminUser
        - SinapsiAdminGroup
    AvatarBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-avatars-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
              AllowedOrigins:
                - http://localhost:5173
                - https://localhost:5173
                - https://sinapsi.studio
              MaxAge: 300
